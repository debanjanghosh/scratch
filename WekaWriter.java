package com.deft.sarcasm.features;

import java.io.BufferedWriter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;

//import com.rutgers.justification.pdtb.classifier.DiscFeaturesForJustiData.FEAT_TYPE;

public class WekaWriter 
{
	private int featureSize;
	private Map<String, List<Map<Integer, Double>>> allFeatureMap;
	private Set<String> allLabels;
	private int startingPoint;
	private List<String> features;

	public WekaWriter()
	{
		
	}
	
	
	public void setStartingPointForFeaturePostion ( int startingPoint)
	{
		this.startingPoint = startingPoint ;
	}
	
	public void setFeatureSize ( int featureSize)
	{
		this.featureSize = featureSize ;
	}
	
	public void setFeatureMap (Map<String, List<Map<Integer, Double>>> allFeatureMap )
	{
		this.allFeatureMap = allFeatureMap ;
	}
	
	public void writeWekaArffFile ( String path, String trainingFile ) throws IOException
	{
		
		BufferedWriter wekaLexPragBoWPunchWriter = new BufferedWriter(new OutputStreamWriter(
				new FileOutputStream(path + "/" +  trainingFile + ".arff"),
				"UTF8"));
		//we need to find the max id of unigrams
		int allFeatureSize = 0 ;
	/*	
		if ( type != null)
		{
			if (  type.equals(FEAT_TYPE.DISC))
			{
				allFeatureSize = 150 ;
			}
		}
		else
		{
	*/	
			allFeatureSize = featureSize ;
			
	//	}
//		allFeatureSize += bigramList.size() ;
//		allFeatureSize = allFeatureSize ;// + 10 ; //lex and puncs features
		Set<String> labels = allLabels ;
		//prologue of wiki files
		writePrologueOfWeka(wekaLexPragBoWPunchWriter,labels,allFeatureSize);
		
		wekaLexPragBoWPunchWriter.newLine();
		wekaLexPragBoWPunchWriter.write("@data");
		wekaLexPragBoWPunchWriter.newLine();
		
		for ( String key : allFeatureMap.keySet() )
		{
			List<Map<Integer,Double>> fvs = allFeatureMap.get(key);
			int index = 0 ;
			
			for ( Map<Integer,Double> fv  : fvs )
			{
				StringBuffer ret = new StringBuffer() ;
				//1,1,1,1,0,0,1,0,1,1,1,1,0,1,0,1,0,0,...0,0,0,'sarcasm'
			//	for ( int i = 1 ; i <= allFeatureSize ; i ++ )
				for ( int i = startingPoint ; i <= startingPoint+allFeatureSize ; i ++ )
						
				{
					if(fv.containsKey(i))
					{
						Double value = fv.get(i);
						{
					//		value = 1.0 ; //1 = only present. if we do not set one - means using direct value
						}
						ret.append("1");
						ret.append(",");
					}
					else
					{
						ret.append("0");
						ret.append(",");
					}
				}
				
				ret.append("'");
				ret.append(key);
				ret.append("'");
				
				wekaLexPragBoWPunchWriter.write(ret.toString());
				wekaLexPragBoWPunchWriter.newLine();
				
				index++ ;
				
			}
		}
	
		wekaLexPragBoWPunchWriter.close();
		
	}
	
	private void writePrologueOfWeka(BufferedWriter wekaLexPragBoWPunchWriter,Set<String>labels,
			int size) throws IOException 
	{
		// TODO Auto-generated method stub
		
		Calendar now = GregorianCalendar.getInstance();
		
		wekaLexPragBoWPunchWriter.write("% Weka ARFF file");
		wekaLexPragBoWPunchWriter.newLine();
		wekaLexPragBoWPunchWriter.write("% Generated by Java Program: Debanjan");
		wekaLexPragBoWPunchWriter.newLine();
		wekaLexPragBoWPunchWriter.write("% " + now.toString());
		wekaLexPragBoWPunchWriter.newLine();
		
		wekaLexPragBoWPunchWriter.write("@RELATION rel") ;
		wekaLexPragBoWPunchWriter.newLine();
		
		size = features.size();
		for (int  i = 1 ; i <= size ; i++)
		{
			//@ATTRIBUTE 1                              NUMERIC
			String att = features.get(i-1) ;
			att = att.replaceAll("'", "QUOTE");
			att = att.replaceAll("\"", "DOUBQUOTE");
			
			att =att.replaceAll("'", "-");
			wekaLexPragBoWPunchWriter.write("@ATTRIBUTE" + " " + att+ " " + "NUMERIC");
			wekaLexPragBoWPunchWriter.newLine();
		}
		
		//@ATTRIBUTE '-label-'                      {sarcasm,negative,positive}
		String label = createStringOnLabels(labels);
		wekaLexPragBoWPunchWriter.write("@ATTRIBUTE '-label-' " + label) ;
		
		
	}
	
	private String createStringOnLabels(Set<String> labels) 
	{
		// TODO Auto-generated method stub
		String ret = "{" ;
		
		for ( String l : labels )
		{
			ret = ret + l +"," ;
		}
		
		ret = ret.substring(0,ret.length()-1) ;
		ret = ret + "}" ;
		
		return ret;
	}

	public void setLabels(Set<String> allLabels) 
	{
		// TODO Auto-generated method stub
		this.allLabels = allLabels ;
	}


	public void setFeatures(List<String> nonWPFeatures) 
	{
		// TODO Auto-generated method stub
		this.features = nonWPFeatures ;
		featureSize = this.features.size();
	}
}
